/****************************************************************************
 **
 ** Copyright (C) 2011-2017 Philippe Steinmann.
 **
 ** This file is part of multiDiagTools library.
 **
 ** multiDiagTools is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** multiDiagTools is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with multiDiagTools.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/

/*! \page libs_Entity Entity
 *
 * In this library, the concept of a entity is a thing of interest
 *  in the application, like a Article, a Person, etc..
 *
 * \note This library does not implement the
 *       [entity component system](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system)
 *
 * A entity can be stored (for example to a SQL database),
 *  which requires some kind of reflection.
 *
 * \section introduction Introduction
 *
 * Qt offers some runtime introspection with the QMetaObject.
 *  A idea could be to create a entity as a subclass of QObject,
 *  and define properties:
 * \code
 * class Person : public QObject
 * {
 *  Q_OBJECT
 *  Q_PROPERTY(qlonglong id READ id WRITE setId);
 *  public:
 *   qlonglong id() const;
 *   void setId(qlonglong id);
 * };
 * \endcode
 * The first problem with a QObject subclass is
 *  that it is not a value class: it cannot be copied.
 *  The second problem is that properties are runtime only.
 *  For example, having a expression like:
 * \code
 *  client.id == 25
 * \endcode
 *  is not possible.
 *
 * There are several C++ libraries available for compile time reflection:
 * - [Boost Mpl](http://www.boost.org/doc/libs/1_66_0/libs/mpl/doc/index.html)
 * - [Boost Hana](http://www.boost.org/doc/libs/1_66_0/libs/hana/doc/html/index.html)
 * - [iguana](https://github.com/qicosmos/iguana)
 * - Probably many more
 *
 * Those libraries are fully compile time, as far as I know.
 *  Mdt::Entity keepts a part of its classes usable at runtime.
 *  This can be usefull, for example, to create dinamicly editable entities.
 *
 * \section createAentity Create a entity
 *
 *  \sa MDT_ENTITY_DEF()
 *  \sa the Mdt::Entity namespace
 */

namespace Mdt{

  /*! \brief Some helpers to create a entity
   */
  namespace Entity{
  }

}
