/****************************************************************************
 **
 ** Copyright (C) 2011-2018 Philippe Steinmann.
 **
 ** This file is part of Mdt library.
 **
 ** Mdt is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** Mdt is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with Mdt.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/
#ifndef MDT_ENTITY_DATA_TEMPLATE_H
#define MDT_ENTITY_DATA_TEMPLATE_H

#include "TypeTraits/IsEntity.h"
#include "TypeTraits/IsEntityDef.h"
#include "TypeTraits/IsEntityFieldDef.h"
#include "FieldAt.h"

namespace Mdt{ namespace Entity{

  /*! \brief Class template for entity data
   *
   * Provides a uniform way to access data and definition
   *  of a entity data class.
   *
   * \tparam Entity Type that derives from EntityTemplate.
   *          This is a struct generated by MDT_ENTITY_DEF().
   *
   * Example:
   * \code
   * struct PersonDataStruct
   * {
   *   qulonglong id;
   *   QString firstName;
   *   QString lastName;
   * };
   *
   * MDT_ENTITY_DEF(
   *   (PersonDataStruct),
   *   Person,
   *   (id, FieldFlag::IsPrimaryKey),
   *   (firstName),
   *   (lastName)
   * )
   *
   * class PersonData : public Mdt::Entity::DataTemplate<PersonEntity>
   * {
   * };
   * \endcode
   *
   * PersonData is now usable in many places in the Mdt::Entity library.
   */
  template<typename Entity>
  class DataTemplate
  {
    static_assert( TypeTraits::IsEntity<Entity>::value, "Entity must be a entity type" );

   public:

    using entity_template_type = Entity;
    using entity_def_type = typename entity_template_type::def_type;
    using data_struct_type = typename entity_template_type::data_struct_type;

    static_assert( TypeTraits::IsEntityDef<entity_def_type>::value, "def_type must be a entity definition type" );

    /*! \brief Set data struct
     */
    void setDataStruct(const data_struct_type & ds)
    {
      mDataStruct = ds;
    }

    /*! \brief Access the data struct for modifications
     */
    data_struct_type & dataStruct()
    {
      return mDataStruct;
    }

    /*! \brief Access data struct for read
     */
    const data_struct_type & constDataStruct() const
    {
      return mDataStruct;
    }

    /*! \brief Get entity definition
     */
    static const entity_def_type def()
    {
      return Entity::def();
    }

    /*! \brief Get the field index of \a FieldDef
     */
    template<typename FieldDef>
    static int fieldIndex(FieldDef) noexcept
    {
      static_assert( TypeTraits::IsEntityFieldDef<FieldDef>::value, "FieldDef must be a entity field definition type" );
      return Mdt::Entity::fieldIndex<entity_def_type, FieldDef>();
    }

   private:

    data_struct_type mDataStruct;
  };

}} // namespace Mdt{ namespace Entity{

#endif // #ifndef MDT_ENTITY_DATA_TEMPLATE_H
