
# JkjJK

# Cable list and test tool

# Introduction

## Concept of x

## Concept of y

## Functionnalities

<table border="1">
  <tr>
    <th>Functionnality</th> <th>State</th> <th>Remarks</th>
  </tr>
  <tr>
    <td>Vehicle type edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Connector edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Article edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Unit edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Link edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Link list reporting (printing, PDF)</td> <td><font color="red"><b>Missing</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Import, export, backup</td> <td><font color="red"><b>Missing</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Versionning</td> <td><font color="red"><b>Missing</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Test node edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Test (model) edition</td> <td><font color="orange"><b>Work in progress</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Calibration</td> <td><font color="red"><b>Missing</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Test execution edition and API</td> <td><font color="orange"><b>Starting</b></font></td> <td></td>
  </tr>
  <tr>
    <td>Test result reporting (printing, PDF)</td> <td><font color="red"><b>Missing</b></font></td> <td></td>
  </tr>

</table>

### Versionning

On real life project, versionning is a very important feature.
Imagine that many systems are allready produced, and that a new feature must be implemented.
When used software does not provide versionning, there is needed to create documentation about modifications to do.
This can be cumbersome and error prone.

Currently, no versionning is implemented. Adding such feature will request modifications in deep (database schema and C++ classes).

# Create a project

## The complete workflow

The complete workflow will show how we could use this tool in a project.
We considere a project for witch we have to make the entiere engeneering,
for example for a modification on the electrical part of a system.

This requiers several tasks, at least:

* Define what to modify
* Draw schemas
* Define components to add or change
* Dependent of the complexity, create cable lists
* Create documentation for continuity check
* Create documentation for comissioning

Cable list tool is able to create a part list, link lists, continuity and isolation checks.
This will be explained in next chapiters.
Note that schema drawing, project management and other stuff is not, and will probably never, provided by this tool (other tools exists for this).

The suggested workflow is:

* Create vehicle type for each system (denomination of vehicle type will be discussed later)
* Enter connectors
* Enter parts of the project by creating articles
* Take schemas and enter each position as new unit
* Add links (in unit edition): if cable lists are needed, check that schema shows every link (most of time, this is not true) an investigate...
* Create test nodes
* Create test (models)
* Create test application itself

At first point of view, this seems to be a infinite task. And yes, it is.
But, at some point of a project, if such engeneering was not made, this can give some problems.
If you think that these steps are not relevant, then you probably not need to create any test application too.

### Create vehicle types

The term 'Vehicle type' seems to be something wrong.
The main idea here is a container for all elements (units) of a system.

![Vehicle type](img/vehicle-type-edition.jpg "Vehicle type edition")

### Create articles

![Article edition](img/article-edition.jpg "Article edition")

### Create connectors

![Connector edition](img/connector-edition.jpg "Article edition")

### Create units

![Unit edition](img/unit-edition.jpg "Unit edition")

![Unit link edition](img/unit-link-edition.jpg "Unit link edition")

![Link beam edition](img/link-beam-edition.jpg "Link beam edition")

![Unit link path view](img/unit-link-path-view.jpg "Unit link path view")

![Unit linked connections view](img/unit-linked-connections-view.jpg "Unit linked connections view")

### Create test nodes

![Test node edition](img/test-node-edition.jpg "Test node edition")

#### Affect units

### Create test cables

![Test cable edition](img/test-cable-edition.jpg "Test cable edition")

### Create test (models)

![Test (model) edition](img/test-model-edition.jpg "Test (model) edition")

#### Add routes

#### Edit test node unit setup

## Calibration



### Create test application

![Basic test tool example](img/basic-tester-example.jpg "Basic test tool example")

![Basic test tool example (instruments states)](img/basic-tester-example-instruments-states.jpg "Basic test tool example (instruments sates)")

## Vehicle type

## Connector

## Article



## Unit




## Test node

## Test connection cable

# Licence

# Credits


