/****************************************************************************
 **
 ** Copyright (C) 2011-2016 Philippe Steinmann.
 **
 ** This file is part of multiDiagTools library.
 **
 ** multiDiagTools is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** multiDiagTools is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with multiDiagTools.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/

/*! \page guideline_page API guide line
 *
 * \section getters Propoerty access
 *
 * When a member function returns a property that is directly known,
 *  the function name should be directly similar to the propoerty name.
 *  Example: SomeObject::isNull() .
 *
 *  If a member function needs some processing before returning the requested value,
 *  it should be prefixed get.
 *  For example, we suppose that getting available tables in a database needs to query the database,
 *  the function should be named like SomeObject::getAvailableTables(T db).
 *
 * \section return_value Return value
 *
 * When a function fails, it should be possible to get the reason why it failed.
 *  This is done by using the Mdt::Error class.
 *
 * Functionnal classes should store a mdtError as member
 *  and provide lastError() function.
 *  Their member functions should follow these rules:
 *   - If the function can fail, but returns no data,
 *      it should return a bool and store the error in lastError.
 *   - If the function can fail, and returns data,
 *      it should return a mdtExpected.
 *      For coherence reason, the error should also be stored in lastError.
 *   - If the function can fail, and it is static,
 *      it should return a mdtExpected.
 *
 * Value classes should not have functions that can fail,
 *  because they do not, for example, read files.
 *  If it occurs that function can fail, they should follow these rules:
 *   - If the function can fail,
 *      it should return a mdtExpected.
 *
 * \section error_handlig Error handling
 *
 * \subsection error_handlig_dialog Dialogs
 *
 *  A dialog is a top level widget that is displayed to the user.
 *   When a error occurs, the dialog should also display it to the user.
 *
 *  If a public function can fail (for example setting a file),
 *   it should display the error to the user and return false,
 *   so the caller knows that something failed and he adapt his flow.
 *   \note If something could fail, the dialog should inform the user, and should not be acceptable.
 */
