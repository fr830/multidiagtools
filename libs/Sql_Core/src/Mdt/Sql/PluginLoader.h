/****************************************************************************
 **
 ** Copyright (C) 2011-2018 Philippe Steinmann.
 **
 ** This file is part of multiDiagTools library.
 **
 ** multiDiagTools is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** multiDiagTools is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with multiDiagTools.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/
#ifndef MDT_SQL_PLUGIN_LOADER_H
#define MDT_SQL_PLUGIN_LOADER_H

#include "PluginInfo.h"
#include "Mdt/Error.h"
#include "AbstractErrorDriver.h"
#include "MdtSql_CoreExport.h"
#include <QSqlDatabase>
#include <QObject>
#include <QString>
#include <QStringList>
#include <QSqlDriver>

namespace Mdt{ namespace Sql{

  /*! \brief Load a Mdt Sql plugin at runtime
   *
   * PluginLoader can load a plugin that matches a interface
   *  (defined in the Mdt Sql library).
   *
   * The SQL driver name is the same than the one passed to QSqlDatabase::addDatabase() .
   *  This name is used to load the plugin that has a implementation that correspond
   *  to the SQL driver used for a specific database connection (given by a QSqlDatabase instance).
   *  This mapping is done by using the QtPlugin meta data, generated by the Q_PLUGIN_METADATA() macro.
   *  More precisely, the json file created by the plugin implementation is used.
   */
  class MDT_SQL_CORE_EXPORT PluginLoader : public QObject
  {
   Q_OBJECT

   public:

    /*! \brief Find a plugin that implements a interface and that is compatible with a SQL driver
     *
     * The first time this method is called, it will be fetched about available plugins
     *  in $root/plugins/Mdt/Sql (where $root is the root of the application or the mdt library).
     *  Later calls will no longer need file I/O, and searchin will be fast.
     *
     * \pre \a interface must not be empty
     * \pre \a driverName must not be empty
     */
    PluginInfo findPlugin(const QString & interface, const QString & driverName);

    /*! \brief Load a plugin
     *
     * Returns a valid pointer to the root component of the plugin on success,
     *  otherwise a nullptr.
     *
     * Internally, QPluginLoader is used.
     *
     * \pre \a pluginInfo must not be null
     * \sa QPluginLoader
     */
    QObject *loadPlugin(const PluginInfo & pluginInfo);

    /*! \brief Get last error
     */
    Mdt::Error lastError() const
    {
      return mLastError;
    }

   private:

    bool fetchAvailablePlugins();
    bool fetchAvailablePluginsIfNot();

    void setLastError(const Mdt::Error & error);
    Mdt::Error mLastError;
  };

}} // namespace Mdt{ namespace Sql{

#endif // #ifndef MDT_SQL_PLUGIN_LOADER_H
