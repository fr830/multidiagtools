# Project file for Multi Diag Tools
# * Part: mdtutils *
# * Directory: mdtutils *

# Project
project (multidiagtools)

# List of Qt headers (headers that contains Q_OBJECT macro)
set (HEADER_FILES 
          # mdtError
          mdtErrorOut.h
          # UIC Number
          mdtUicNumberWidget.h
          # mdtFileSystem
          mdtFileCopier.h
          # I/O
          mdtAbstractIo.h
          mdtAnalogIo.h
          mdtDigitalIo.h
          # Main application
          mdtApplication.h
    )

# List of source files
set (SOURCES_FILES 
          mdtAlgorithms.cpp
          mdtBuffer.cpp
          # Frame
          mdtFrame.cpp
          mdtFrameAscii.cpp
          mdtFrameModbusTcp.cpp
          mdtFrameUsbTmc.cpp
          mdtFrameUsbControl.cpp
          mdtTime.cpp
          # Frame codec
          mdtFrameCodec.cpp
          mdtFrameCodecAscii.cpp
          mdtFrameCodecScpi.cpp
          mdtFrameCodecScpiU3606A.cpp
          mdtFrameCodecModbus.cpp
          mdtFrameCodecK8055.cpp
          # mdtError
          mdtError.cpp
          mdtErrorOut.cpp
          # File
          mdtCsvFile.cpp
          # UIC number
          mdtUicNumber.cpp
          mdtUicNumberItem.cpp
          mdtUicNumberWidget.cpp
          mdtUicNumberValidator.cpp
          # mdtFileSystem
          mdtPartitionAttributes.cpp
          mdtFileCopier.cpp
          mdtFileCopierItem.cpp
          # I/O
          mdtAbstractIo.cpp
          mdtAnalogIo.cpp
          mdtDigitalIo.cpp
          # Value
          mdtValue.cpp
          # mdtGraph
          mdtGraphVertexData.cpp
          mdtGraphEdgeData.cpp
          mdtGraph.cpp
          mdtGraphVertex.cpp
          mdtGraphVertexAdjacent.cpp
          # Main application
          mdtApplication.cpp
    )

# List of .ui files
set (FORM_FILES
          mdtUicNumberWidget.ui
    )

# List of rcc files (Qt ressources)
set (RESOURCE_FILES

    )

# Platform specific files

# Unix (Posix) specific files
if(UNIX)
  set (SOURCES_FILES ${SOURCES_FILES}
          linux/mdtPartitionAttributesPosix.cpp
  )
  set (HEADER_FILES ${HEADER_FILES} 
  )
endif(UNIX)

# Windows specific files
if(WIN32)
  set (SOURCES_FILES ${SOURCES_FILES}
          windows/mdtPartitionAttributesWindows.cpp
  )
  set (HEADER_FILES ${HEADER_FILES} 
  )
endif(WIN32)

# Files on witch moc compiler must work
QT4_WRAP_CPP (MOC_HEADERS ${HEADER_FILES})

# Files on witch uic compiler must work
QT4_WRAP_UI (UIC_HEADERS ${FORM_FILES})

# Files on witch rcc compiler must work
QT4_ADD_RESOURCES (RCC_FILES ${RESOURCE_FILES})

# Some specific build options

# On MinGW, the -ansi flag must be removed for file mdtFileCopier.cpp,
#  because this "diseable" the availablity of _fileno() function.
# Don't found other solution than remove the -ansi flag for the directory,
#  and re-add -ansi flg for all files exept mdtFileCopier.cpp ..
# Note: if(MINGW) not work, so we use if(WIN32) ..
if(WIN32)
  remove_definitions("-ansi")
  foreach(SRCFILE ${SOURCES_FILES})
    if(NOT (${SRCFILE} STREQUAL "mdtFileCopier.cpp"))
      set_source_files_properties(${SRCFILE} PROPERTIES COMPILE_FLAGS "-ansi")
    endif(NOT (${SRCFILE} STREQUAL "mdtFileCopier.cpp"))
  endforeach(SRCFILE)
endif(WIN32)

# Output library
add_library (mdtutils${MDTLIB_VERSION_SUFFIX} SHARED ${SOURCES_FILES} ${MOC_HEADERS} ${UIC_HEADERS} ${RCC_FILES})
target_link_libraries(mdtutils${MDTLIB_VERSION_SUFFIX} ${QT_LIBRARIES})
target_link_libraries(mdtutils${MDTLIB_VERSION_SUFFIX} "qtsingleapplication${MDTLIB_VERSION_SUFFIX}")

# Static version of the library
#if(MDT_BUILD_STATIC_LIBS)
#  add_library (mdtutils_static STATIC ${SOURCES_FILES} )
#  target_link_libraries(mdtutils_static ${QT_LIBRARIES})
#  set_target_properties("mdtutils_static" PROPERTIES OUTPUT_NAME "mdtutils")
#endif(MDT_BUILD_STATIC_LIBS)

# Translations - We generate a .pro file, that simplify the usage of lupdate
file(WRITE "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "# Translations project file for lupdate/lrelease\n")
file(APPEND "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "# This file is generated by CMake, all changes will be lost\n")
file(APPEND "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "TRANSLATIONS = ${PROJECT_SOURCE_DIR}/../../translations/mdtutils_fr.ts\n")
file(APPEND "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "TRANSLATIONS += ${PROJECT_SOURCE_DIR}/../../translations/mdtutils_de.ts\n")
foreach(SRCFILE ${SOURCES_FILES})
  file(APPEND "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "SOURCES += ${PROJECT_SOURCE_DIR}/${SRCFILE}\n")
endforeach(SRCFILE)
foreach(FRMFILE ${FORM_FILES})
  file(APPEND "${PROJECT_SOURCE_DIR}/../../translations/mdtutils.pro" "FORMS += ${PROJECT_SOURCE_DIR}/${FRMFILE}\n")
endforeach(FRMFILE)

# Headers to install
file(GLOB INSTALL_HEADERS *.h)
install(FILES ${INSTALL_HEADERS} DESTINATION "${HEADERS_DEST_DIR}/mdtutils" COMPONENT dev)

# Install targets
install(TARGETS "mdtutils${MDTLIB_VERSION_SUFFIX}" DESTINATION "${LIB_DEST_DIR}" COMPONENT lib)

# Strip library and put debug symbols into separate file
if(UNIX)
  add_custom_command(TARGET "mdtutils${MDTLIB_VERSION_SUFFIX}"
                    POST_BUILD
                    COMMAND objcopy --only-keep-debug "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.so" "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.dbg"
                    COMMAND strip --strip-debug --strip-unneeded "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.so"
                    COMMAND objcopy --add-gnu-debuglink="libmdtutils${MDTLIB_VERSION_SUFFIX}.dbg" "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.so"
                    COMMAND chmod -x "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.dbg")
  install(FILES "${PROJECT_SOURCE_DIR}/libmdtutils${MDTLIB_VERSION_SUFFIX}.dbg" DESTINATION "${LIB_DEST_DIR}" COMPONENT dbg)
endif(UNIX)


#if(MDT_BUILD_STATIC_LIBS)
#  install(TARGETS "mdtutils_static" DESTINATION "${LIB_DEST_DIR}" COMPONENT lib)
#endif(MDT_BUILD_STATIC_LIBS)
