/****************************************************************************
 **
 ** Copyright (C) 2011-2018 Philippe Steinmann.
 **
 ** This file is part of Mdt library.
 **
 ** Mdt is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** Mdt is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with Mdt.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/
#ifndef MDT_ENTITY_DATA_TEMPLATE_H
#define MDT_ENTITY_DATA_TEMPLATE_H

#include "TypeTraits/IsEntityDef.h"

namespace Mdt{ namespace Entity{

  /*! \brief Class template for entity data
   *
   * Provides a uniform way to access data and definition
   *  of a entity data class.
   *
   * \tparam DataStruct Data struct defined for the entity.
   *          This is the one passed to MDT_ENTITY_DEF().
   * \tparam EntityDef Definition of the entity.
   *          This is a struct generated by MDT_ENTITY_DEF().
   *
   * Example:
   * \code
   * struct MyEntityDataStruct
   * {
   *   qulonglong id;
   *   QString name;
   * };
   *
   * MDT_ENTITY_DEF(
   *   (MyEntityDataStruct),
   *   MyEntity,
   *   (id, FieldFlag::IsPrimaryKey)
   * )
   *
   * class MyEntityData : public Mdt::Entity::DataTemplate<MyEntityDataStruct, MyEntityDef>
   * {
   * };
   * \endcode
   *
   * MyEntityData is now usable in may places in the Mdt::Entity library.
   */
  template<typename EntityDataStruct, typename EntityDef>
  class DataTemplate
  {
    static_assert( TypeTraits::IsEntityDef<EntityDef>::value, "EntityDef must be a entity definition type" );

   public:

    using def_type = EntityDef;
    using data_struct_type = EntityDataStruct;

    /*! \brief Access the data struct for modifications
     */
    EntityDataStruct & dataStruct()
    {
      return mDataStruct;
    }

    /*! \brief Access data struct for read
     */
    const EntityDataStruct & constDataStruct() const
    {
      return mDataStruct;
    }

    /*! \brief Get entity definition
     */
    static const EntityDef def()
    {
      return EntityDef{};
    }

   private:

    EntityDataStruct mDataStruct;
  };

}} // namespace Mdt{ namespace Entity{

#endif // #ifndef MDT_ENTITY_DATA_TEMPLATE_H
