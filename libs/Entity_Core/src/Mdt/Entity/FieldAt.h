/****************************************************************************
 **
 ** Copyright (C) 2011-2018 Philippe Steinmann.
 **
 ** This file is part of Mdt library.
 **
 ** Mdt is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** Mdt is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with Mdt.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/
#ifndef MDT_ENTITY_FIELD_AT_H
#define MDT_ENTITY_FIELD_AT_H

#include "FieldAttributes.h"
#include "TypeTraits/IsEntityDef.h"
#include <QString>
#include <boost/fusion/include/size.hpp>
#include <boost/fusion/include/at.hpp>
#include <initializer_list>
#include <utility>
#include <type_traits>

namespace Mdt{ namespace Entity{

  namespace Impl{

    template<typename EntityDef, int I>
    static const QString fieldNameAtIndex(const EntityDef & entityDef)
    {
      return boost::fusion::at_c<I>(entityDef).fieldName();
    }

    template<typename EntityDef, int... Is>
    static const QString fieldNameAt(const EntityDef & entityDef, int index, std::integer_sequence<int, Is...>)
    {
      static QString value;
      (void)std::initializer_list<int> {(index == Is ? (value = fieldNameAtIndex<EntityDef, Is>(entityDef)),0 : 0)...};
      return value;
    }

    template<typename EntityDef, int I>
    static const FieldAttributes fieldAttributesAtIndex(const EntityDef & entityDef)
    {
      return boost::fusion::at_c<I>(entityDef).fieldAttributes();
    }

    template<typename EntityDef, int... Is>
    static const FieldAttributes fieldAttributesAt(const EntityDef & entityDef, int index, std::integer_sequence<int, Is...>)
    {
      static FieldAttributes value;
      (void)std::initializer_list<int> {(index == Is ? (value = fieldAttributesAtIndex<EntityDef, Is>(entityDef)),0 : 0)...};
      return value;
    }

  } // namespace Impl{

  /*! \brief Get count of fields in \a EntityDef
   */
  template<typename EntityDef>
  static int fieldCount(const EntityDef &) noexcept
  {
    static_assert( TypeTraits::IsEntityDef<EntityDef>::value, "EntityDef must be a entity definition type" );
    return boost::fusion::result_of::size<EntityDef>::type::value;
  }

  /*! \brief Get count of fields in \a EntityDef
   */
  template<typename EntityDef>
  constexpr int fieldCount() noexcept
  {
    static_assert( TypeTraits::IsEntityDef<EntityDef>::value, "EntityDef must be a entity definition type" );
    return boost::fusion::result_of::size<EntityDef>::type::value;
  }

  /*! \brief Get the field name in \a entityDef at \a index
   *
   * This function can be used to get the field name of a entity def,
   *  which was generated by MDT_ENTITY_DEF() , while the index is only known at runtime.
   *
   * \pre \a index must be in valid range ( 0 <= \a index < boost::fusion::result_of::size() ).
   * \note If the index is known at compile time, boost::fusion::at_c() should be used.
   * \note To iterate all members of \a EntityDef , use boost::fusion::for_each().
   */
  template<typename EntityDef>
  static const QString fieldNameAt(const EntityDef & entityDef, int index)
  {
    static_assert( TypeTraits::IsEntityDef<EntityDef>::value, "EntityDef must be a entity definition type" );

    constexpr int size = fieldCount<EntityDef>();

    Q_ASSERT(index >= 0);
    Q_ASSERT(index < size);

    return Impl::fieldNameAt(entityDef, index, std::make_integer_sequence<int, size>{});
  }

  /*! \brief Get the field attributes in \a entityDef at \a index
   *
   * This function can be used to get the field attributes of a entity def,
   *  which was generated by MDT_ENTITY_DEF() , while the index is only known at runtime.
   *
   * \pre \a index must be in valid range ( 0 <= \a index < boost::fusion::result_of::size() ).
   * \note If the index is known at compile time, boost::fusion::at_c() should be used.
   * \note To iterate all members of \a EntityDef , use boost::fusion::for_each().
   */
  template<typename EntityDef>
  static const FieldAttributes fieldAttributesAt(const EntityDef & entityDef, int index)
  {
    static_assert( TypeTraits::IsEntityDef<EntityDef>::value, "EntityDef must be a entity definition type" );

    constexpr int size = fieldCount<EntityDef>();

    Q_ASSERT(index >= 0);
    Q_ASSERT(index < size);

    return Impl::fieldAttributesAt(entityDef, index, std::make_integer_sequence<int, size>{});
  }

}} // namespace Mdt{ namespace Entity{

#endif // #ifndef MDT_ENTITY_FIELD_AT_H
